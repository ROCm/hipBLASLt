#!/usr/bin/env python3

"""Copyright (C) 2022-2023 Advanced Micro Devices, Inc. All rights reserved.

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
   ies of the Software, and to permit persons to whom the Software is furnished
   to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
   PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
   CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import sys
# from os import path
import pathlib
import os
import argparse
import logging
import subprocess
from pathlib import Path

console = logging.StreamHandler()

def assemble(inputSFile,
             outputOFile,
             outputCOFile,
             arch,
             verbose=False,
             timeout=10):

    # assembler
    cmd = [pathlib.Path("/opt/rocm/llvm/bin/clang++").resolve()]
    cmd += ['-x','assembler', '-target','amdgcn-amd-amdhsa', "-mcode-object-version=4", f'-mcpu={arch}', "-mwavefrontsize64"]
    cmd += ['-c','-o', f'{outputOFile}', f'{inputSFile}']

    cmd = [str(x) for x in cmd]
    logging.info('assembler command: ' + ' '.join(cmd))
    if verbose:
        print('\nassembler command: ' + ' '.join(cmd))


    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    for line in proc.stdout:
        line = line.decode('utf-8').rstrip('\n')
        print(line)
    try:
        proc.wait(timeout=None if timeout == 0 else timeout)
    except subprocess.TimeoutExpired:
        logging.info("timeout expired. killed. Please check the process.")
        proc.kill()
    success = proc.returncode == 0

    if success == False:
        return False;

    # linker to CO
    cmd = [pathlib.Path("/opt/rocm/llvm/bin/clang++").resolve()]
    cmd += ['-target','amdgcn-amd-amdhsa', "-Xlinker", "--build-id=sha1"]
    cmd += ['-o', f'{outputCOFile}', f'{outputOFile}']

    cmd = [str(x) for x in cmd]
    logging.info('linker command: ' + ' '.join(cmd))
    if verbose:
        print('\nlinker command: ' + ' '.join(cmd))

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    for line in proc.stdout:
        line = line.decode('utf-8').rstrip('\n')
        print(line)
    try:
        proc.wait(timeout=None if timeout == 0 else timeout)
    except subprocess.TimeoutExpired:
        logging.info("timeout expired. killed. Please check the process.")
        proc.kill()
    success = proc.returncode == 0

    return success

def command_assemble(arguments, root_folder):
    """Assembler"""

    if arguments.runConfig:
        print(f'running from config: {arguments.runConfig}')
    else:
        print("runConfig not set. Use --runConfig /path/of/configfile")
        return False

    if arguments.arch:
        print(f'compiling asm for arch: {arguments.arch}')
    else:
        print("arch not set. Use --arch <gpuarch>")
        return False


    inputSFile = ""
    outputOFile = ""
    outputCOFile = ""

    configPath = pathlib.Path(os.path.join(root_folder, arguments.runConfig)).resolve()
    configFile = open(configPath, 'r')
    lines = configFile.readlines()

    for line in lines:
        if line.startswith("asm-file="):
            inputSFile = line.strip().split('=')[1]
        elif line.startswith("code-object="):
            outputCOFile = line.strip().split('=')[1]

    configFile.close()

    if len(inputSFile) == 0 or len(outputCOFile) == 0:
        print("\nInput S File or Output CO File not specified in config file.")
        return False

    # asm-file and code-object file are both relative-path
    inputSFile = pathlib.Path(os.path.join(root_folder, inputSFile)).resolve()
    if not os.path.exists(inputSFile):
        print(f"\nInput S File {inputSFile} not found, please specify a .s file with rel-path")
        return False

    outputOFile = str(inputSFile).replace(".s", ".o")
    outputCOFile = pathlib.Path(os.path.join(root_folder, outputCOFile)).resolve()

    # print(inputSFile)
    # print(outputOFile)
    # print(outputCOFile)

    logging.info("Compiling asm file.....")
    print("\nCompiling asm file.....")

    result = assemble(inputSFile, outputOFile, outputCOFile, arguments.arch, True)

    log_msg = "Build asm complete."
    if result == False:
        log_msg = "Build asm failed."

    logging.info(log_msg)
    print("\n" + log_msg)

    return result

def command_asm_runner(arguments, root_folder, runnerExecPath):
    """Standalone Runner"""

    # runner
    configPath = pathlib.Path(os.path.join(root_folder, arguments.runConfig)).resolve()
    cmd = [runnerExecPath]
    cmd += ['--config-file',f'{configPath}']

    cmd = [str(x) for x in cmd]
    logging.info('standalone runner command: ' + ' '.join(cmd))
    print('\nstandalone runner command: ' + ' '.join(cmd))

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    for line in proc.stdout:
        line = line.decode('utf-8').rstrip('\n')
        print(line)
    try:
        proc.wait(timeout=None)
    except subprocess.TimeoutExpired:
        logging.info("timeout expired. killed. Please check the process.")
        proc.kill()
    success = proc.returncode == 0

    return success

def main():

    parser = argparse.ArgumentParser(prog='asm-runner')

    dir_of_this_script = pathlib.Path(os.path.dirname(os.path.realpath(__file__))).resolve()
    # print(f'dir of this script = {dir_of_this_script}')

    runnerExecPath = pathlib.Path(os.path.join(dir_of_this_script, 'runner')).resolve()
    if not os.path.exists(runnerExecPath):
        print('CPP runner executable not built yet, please type ./build.sh [--debug] first')
        return

    parser.add_argument('--runConfig',
                        type=str,
                        help='the config file containing the source .s file and the desired output .co filepath',
                        default=None)

    parser.add_argument('--arch',
                        type=str,
                        help='arch of the gpu, e.g. gfx942, gfx950',
                        default='gfx942')

    arguments = parser.parse_args()

    assembleResult = command_assemble(arguments, dir_of_this_script)

    if assembleResult == True:
        command_asm_runner(arguments, dir_of_this_script, runnerExecPath)

    sys.exit(0)

if __name__=='__main__':
    logging.basicConfig(filename='asm-runner.log',
                        format='%(asctime)s %(levelname)s: %(message)s',
                        level=logging.DEBUG)

    console.setLevel(logging.WARNING)
    console.setFormatter(logging.Formatter('%(levelname)-8s: %(message)s'))
    logging.getLogger('').addHandler(console)

    main()
